#version 460
#extension GL_EXT_mesh_shader : require

layout(local_size_x = 1) in;

layout(set = 0, binding = 0) uniform UBO {
    mat4 model;
    mat4 view;
    mat4 proj;
    float cullingX;  // X轴的剔除阈值
} ubo;

layout(push_constant) uniform PushConstants {
    vec3 sphereOffset;  // 球体偏移量
} pushConstants;

struct Meshlet {
    uint vertexOffset;
    uint triangleOffset;
    uint vertexCount;
    uint triangleCount;
};

layout(set = 0, binding = 1) readonly buffer MeshletBuffer {
    Meshlet meshlets[];
};

layout(set = 0, binding = 2) readonly buffer UniqueVertexIndexBuffer {
    uint uniqueVertexIndices[];
};

layout(set = 0, binding = 4) readonly buffer VertexBuffer {
    vec4 vertices[];
};

struct Task
{
  uint meshletIndex;
};

taskPayloadSharedEXT Task OUT;

void main()
{
    uint meshletIndex = gl_GlobalInvocationID.x;
    OUT.meshletIndex = meshletIndex;
    
    // 获取当前meshlet
    Meshlet m = meshlets[meshletIndex];
    
    // 计算meshlet的中心位置
    vec3 center = vec3(0.0);
    for (uint i = 0; i < m.vertexCount; ++i) {
        uint globalVertexIndex = uniqueVertexIndices[m.vertexOffset + i];
        vec3 pos = vertices[globalVertexIndex].xyz;
        center += pos;
    }
    center /= float(m.vertexCount);
    
    // 添加球体偏移量，然后变换到世界空间
    vec4 worldCenter = ubo.model * vec4(center + pushConstants.sphereOffset, 1.0);
    
    // 剔除掉X坐标大于cullingX值的meshlet（右边的meshlet）
    // 只渲染X坐标小于等于cullingX的meshlet
    if (worldCenter.x <= ubo.cullingX) {
        EmitMeshTasksEXT(1, 1, 1);
    }
}