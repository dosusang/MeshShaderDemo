#version 460
#extension GL_EXT_mesh_shader : require
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : require

layout(local_size_x = 1) in;

// 假设最大meshlet顶点/三角形数
layout(max_vertices = 64, max_primitives = 124) out;
layout(triangles) out;

// 声明输出的顶点属性
layout(location = 0) out PerVertex {
    vec3 color;
} outVert[];

layout(set = 0, binding = 0) uniform UBO {
    mat4 model;
    mat4 view;
    mat4 proj;
} ubo;

struct Meshlet {
    uint vertexOffset;
    uint triangleOffset;
    uint vertexCount;
    uint triangleCount;
};

layout(set = 0, binding = 1) readonly buffer MeshletBuffer {
    Meshlet meshlets[];
};
layout(set = 0, binding = 2) readonly buffer UniqueVertexIndexBuffer {
    uint uniqueVertexIndices[]; // 全局顶点索引数组
};
layout(set = 0, binding = 3) readonly buffer PrimitiveIndexBuffer {
    uint8_t primitiveIndices[]; // meshlet局部顶点索引数组
};
layout(set = 0, binding = 4) readonly buffer VertexBuffer {
    vec4 vertices[];
};


struct Task {
    uint    meshletIndex;
};

taskPayloadSharedEXT Task IN;

uint meshletID = IN.meshletIndex;

void main() {
    Meshlet m = meshlets[meshletID];    

    // 顶点信息
    for (uint i = 0; i < m.vertexCount; ++i) {
        uint globalVertexIndex = uniqueVertexIndices[m.vertexOffset + i];
        vec3 pos = vertices[globalVertexIndex].xyz;
        gl_MeshVerticesEXT[i].gl_Position = ubo.proj * ubo.view * ubo.model * vec4(pos, 1.0);
        outVert[i].color =vec3((meshletID%3/3.), (meshletID%7/7.0), (meshletID%5/5.0));
    }


    // 三角形信息
    for (uint i = 0; i < m.triangleCount; ++i) {
        uint triBase = m.triangleOffset + i * 3;
        uint i0 = primitiveIndices[triBase + 0]; // meshlet局部顶点索引
        uint i1 = primitiveIndices[triBase + 1];
        uint i2 = primitiveIndices[triBase + 2];
        gl_PrimitiveTriangleIndicesEXT[i] = uvec3(i0, i1, i2);
    }

    SetMeshOutputsEXT(m.vertexCount, m.triangleCount);
}
